$date
	Sat Oct  4 15:50:33 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module baby_soc_tb $end
$var wire 8 ! periph_to_cpu [7:0] $end
$var wire 8 " mem_to_periph [7:0] $end
$var wire 8 # mem_to_cpu [7:0] $end
$var wire 8 $ cpu_to_mem [7:0] $end
$var reg 1 % clk $end
$var reg 1 & reset $end
$scope module uut $end
$var wire 1 % clk $end
$var wire 8 ' cpu_to_mem [7:0] $end
$var wire 8 ( mem_to_cpu [7:0] $end
$var wire 8 ) mem_to_periph [7:0] $end
$var wire 8 * periph_to_cpu [7:0] $end
$var wire 1 & reset $end
$var wire 8 + periph_out [7:0] $end
$var wire 8 , mem_out [7:0] $end
$var wire 8 - cpu_out [7:0] $end
$scope module CPU1 $end
$var wire 1 % clk $end
$var wire 1 & reset $end
$var reg 8 . counter [7:0] $end
$var reg 8 / data_out [7:0] $end
$upscope $end
$scope module MEM1 $end
$var wire 1 % clk $end
$var wire 8 0 data_in [7:0] $end
$var wire 1 & reset $end
$var reg 8 1 data_out [7:0] $end
$upscope $end
$scope module PER1 $end
$var wire 1 % clk $end
$var wire 8 2 data_in [7:0] $end
$var wire 1 & reset $end
$var reg 8 3 data_out [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 3
b0 2
b0 1
bx 0
bx /
b0 .
bx -
b0 ,
b0 +
b0 *
b0 )
b0 (
bx '
1&
0%
bx $
b0 #
b0 "
b0 !
$end
#5000
b0 $
b0 '
b0 -
b0 /
b0 0
1%
#10000
0%
#15000
1%
#20000
0%
0&
#25000
b10 !
b10 *
b10 +
b10 3
b1 "
b1 )
b1 #
b1 (
b1 ,
b1 1
b1 2
b1 .
1%
#30000
0%
#35000
b1 $
b1 '
b1 -
b1 /
b1 0
b10 .
b11 !
b11 *
b11 +
b11 3
1%
#40000
0%
#45000
b10 "
b10 )
b10 #
b10 (
b10 ,
b10 1
b10 2
b10 $
b10 '
b10 -
b10 /
b10 0
b11 .
1%
#50000
0%
#55000
b11 $
b11 '
b11 -
b11 /
b11 0
b100 .
b11 "
b11 )
b11 #
b11 (
b11 ,
b11 1
b11 2
b100 !
b100 *
b100 +
b100 3
1%
#60000
0%
#65000
b101 !
b101 *
b101 +
b101 3
b100 "
b100 )
b100 #
b100 (
b100 ,
b100 1
b100 2
b100 $
b100 '
b100 -
b100 /
b100 0
b101 .
1%
#70000
0%
#75000
b101 $
b101 '
b101 -
b101 /
b101 0
b110 .
b101 "
b101 )
b101 #
b101 (
b101 ,
b101 1
b101 2
b110 !
b110 *
b110 +
b110 3
1%
#80000
0%
#85000
b111 !
b111 *
b111 +
b111 3
b110 "
b110 )
b110 #
b110 (
b110 ,
b110 1
b110 2
b110 $
b110 '
b110 -
b110 /
b110 0
b111 .
1%
#90000
0%
#95000
b111 $
b111 '
b111 -
b111 /
b111 0
b1000 .
b111 "
b111 )
b111 #
b111 (
b111 ,
b111 1
b111 2
b1000 !
b1000 *
b1000 +
b1000 3
1%
#100000
0%
#105000
b1001 !
b1001 *
b1001 +
b1001 3
b1000 "
b1000 )
b1000 #
b1000 (
b1000 ,
b1000 1
b1000 2
b1000 $
b1000 '
b1000 -
b1000 /
b1000 0
b1001 .
1%
#110000
0%
#115000
b1001 $
b1001 '
b1001 -
b1001 /
b1001 0
b1010 .
b1001 "
b1001 )
b1001 #
b1001 (
b1001 ,
b1001 1
b1001 2
b1010 !
b1010 *
b1010 +
b1010 3
1%
#120000
0%
#125000
b1011 !
b1011 *
b1011 +
b1011 3
b1010 "
b1010 )
b1010 #
b1010 (
b1010 ,
b1010 1
b1010 2
b1010 $
b1010 '
b1010 -
b1010 /
b1010 0
b1011 .
1%
#130000
0%
#135000
b1011 $
b1011 '
b1011 -
b1011 /
b1011 0
b1100 .
b1011 "
b1011 )
b1011 #
b1011 (
b1011 ,
b1011 1
b1011 2
b1100 !
b1100 *
b1100 +
b1100 3
1%
#140000
0%
#145000
b1101 !
b1101 *
b1101 +
b1101 3
b1100 "
b1100 )
b1100 #
b1100 (
b1100 ,
b1100 1
b1100 2
b1100 $
b1100 '
b1100 -
b1100 /
b1100 0
b1101 .
1%
#150000
0%
#155000
b1101 $
b1101 '
b1101 -
b1101 /
b1101 0
b1110 .
b1101 "
b1101 )
b1101 #
b1101 (
b1101 ,
b1101 1
b1101 2
b1110 !
b1110 *
b1110 +
b1110 3
1%
#160000
0%
#165000
b1111 !
b1111 *
b1111 +
b1111 3
b1110 "
b1110 )
b1110 #
b1110 (
b1110 ,
b1110 1
b1110 2
b1110 $
b1110 '
b1110 -
b1110 /
b1110 0
b1111 .
1%
#170000
0%
#175000
b1111 $
b1111 '
b1111 -
b1111 /
b1111 0
b10000 .
b1111 "
b1111 )
b1111 #
b1111 (
b1111 ,
b1111 1
b1111 2
b10000 !
b10000 *
b10000 +
b10000 3
1%
#180000
0%
#185000
b10001 !
b10001 *
b10001 +
b10001 3
b10000 "
b10000 )
b10000 #
b10000 (
b10000 ,
b10000 1
b10000 2
b10000 $
b10000 '
b10000 -
b10000 /
b10000 0
b10001 .
1%
#190000
0%
#195000
b10001 $
b10001 '
b10001 -
b10001 /
b10001 0
b10010 .
b10001 "
b10001 )
b10001 #
b10001 (
b10001 ,
b10001 1
b10001 2
b10010 !
b10010 *
b10010 +
b10010 3
1%
#200000
0%
